// This file is generated by Firebase Genkit.
// Manual changes to this file will be overwritten.
'use server';
/**
 * @fileOverview Recipe generation flow.
 *
 * - generateRecipe - A function that generates a recipe based on the ingredients.
 * - GenerateRecipeInput - The input type for the generateRecipe function.
 * - GenerateRecipeOutput - The return type for the generateRecipe function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const GenerateRecipeInputSchema = z.object({
  ingredients: z
    .array(z.string())
    .describe('The ingredients to generate a recipe for.'),
});
export type GenerateRecipeInput = z.infer<typeof GenerateRecipeInputSchema>;

const GenerateRecipeOutputSchema = z.object({
  recipeName: z.string().describe('The name of the recipe.'),
  instructions: z.string().describe('The instructions for the recipe.'),
  prepTime: z.string().describe('The prep time for the recipe.'),
  ingredients: z
    .array(z.string())
    .describe('The list of ingredients with quantities.'),
});
export type GenerateRecipeOutput = z.infer<typeof GenerateRecipeOutputSchema>;

export async function generateRecipe(input: GenerateRecipeInput): Promise<GenerateRecipeOutput> {
  return generateRecipeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateRecipePrompt',
  input: {
    schema: z.object({
      ingredients: z
        .array(z.string())
        .describe('The ingredients to generate a recipe for.'),
    }),
  },
  output: {
    schema: z.object({
      recipeName: z.string().describe('The name of the recipe.'),
      instructions: z.string().describe('The instructions for the recipe.'),
      prepTime: z.string().describe('The prep time for the recipe.'),
      ingredients: z
        .array(z.string())
        .describe('The list of ingredients with quantities.'),
    }),
  },
  prompt: `You are a professional chef. Given the following ingredients, generate a delicious recipe.
Ingredients:
{{#each ingredients}}- {{{this}}}
{{/each}}

Respond in the following format:
Recipe Name: [Recipe Name]
Prep Time: [Prep Time]
Ingredients:
- [Ingredient 1] (quantity)
- [Ingredient 2] (quantity)
Instructions:
[Step 1]
[Step 2]
[Step 3]
`,
});

const generateRecipeFlow = ai.defineFlow<
  typeof GenerateRecipeInputSchema,
  typeof GenerateRecipeOutputSchema
>({
  name: 'generateRecipeFlow',
  inputSchema: GenerateRecipeInputSchema,
  outputSchema: GenerateRecipeOutputSchema,
},
async input => {
  const {output} = await prompt(input);
  return output!;
});